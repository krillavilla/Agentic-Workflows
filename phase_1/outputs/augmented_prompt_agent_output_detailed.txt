PROMPT:
What are the key principles of object-oriented programming?

RESPONSE:
Object-oriented programming (OOP) is a programming paradigm that revolves around the concept of "objects", which can contain data in the form of fields (attributes or properties) and code in the form of procedures (methods or functions). The key principles of OOP are:

1. **Encapsulation**: Encapsulation refers to bundling data (attributes) and methods (functions) that operate on that data into a single unit known as an object. The object controls access to its data through methods and hides the internal state of an object from outside interference. This helps in achieving data security and code modularity. For example, consider a "Car" class which encapsulates attributes like "color", "model", and methods like "start_engine()", "accelerate()", and "brake()".

2. **Inheritance**: Inheritance allows a class (subclass or child class) to inherit attributes and methods from another class (superclass or parent class). This promotes code reusability and helps in creating a hierarchy of classes. For instance, a "Rectangle" class can inherit properties like "width" and "height" from a "Shape" class. 

3. **Polymorphism**: Polymorphism allows objects of different classes to be treated as objects of a common superclass. This means that a single interface can be used to represent different data types or objects. Polymorphism enables flexibility and extensibility in code. An example of polymorphism is having a "Shape" superclass with subclasses like "Circle", "Rectangle", and "Triangle", each implementing a "calculateArea()" method differently.

4. **Abstraction**: Abstraction involves hiding the complex implementation details and showing only the necessary features of an object. This simplifies the programming model and allows focusing on what an object does rather than how it does it. For instance, a "BankAccount" class may expose methods like "deposit()" and "withdraw()" while hiding the internal workings of interest calculations and transaction handling.

5. **Classes and Objects**: Classes are blueprints or templates for creating objects. They define the properties (attributes) and behaviors (methods) that objects of that type will have. Objects are instances of classes, created using the class constructor. For example, a "Person" class can define attributes like "name" and "age", and methods like "walk()" and "talk()", while individual persons like "Alice" or "Bob" are instances of the "Person" class.

6. **Message Passing**: Objects communicate with each other by sending and receiving messages. This is achieved through method calls, where one object invokes a method of another object to request some action or information. Message passing enables interactions between objects in OOP.

By adhering to these key principles of object-oriented programming, developers can design robust, modular, and maintainable code that models real-world entities effectively.

PERSONA/KNOWLEDGE EFFECT: The agent augmented the prompt with prefix: 'I need a comprehensive explanation of ' and suffix: '. Please include examples where appropriate.' to get a detailed explanation.
